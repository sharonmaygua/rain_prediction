{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import sys\n",
        "print(sys.executable)\n",
        "print(sys.version)\n",
        "print(sys.version_info)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "/anaconda/envs/azureml_py310_sdkv2/bin/python\n3.10.11 (main, May 16 2023, 00:28:57) [GCC 11.2.0]\nsys.version_info(major=3, minor=10, micro=11, releaselevel='final', serial=0)\n"
        }
      ],
      "execution_count": 5,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1698626962134
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azure.ai.ml import MLClient\n",
        "from azure.identity import DefaultAzureCredential\n",
        "from azure.ai.ml.entities import AmlCompute\n",
        "import os\n",
        "from azure.ai.ml.entities import Environment\n",
        "from azure.ai.ml import command, Input\n",
        "from azure.ai.ml.sweep import Choice, Uniform, MedianStoppingPolicy\n",
        "from azure.identity import DefaultAzureCredential"
      ],
      "outputs": [],
      "execution_count": 6,
      "metadata": {
        "gather": {
          "logged": 1698626962557
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "credential = DefaultAzureCredential()\n",
        "ml_client = MLClient.from_config(credential=credential)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "Found the config file in: /config.json\n"
        }
      ],
      "execution_count": 7,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1698626963141
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Intro\n",
        "\n",
        "Para el tuneo de hiperparámetros para un problema de clasificación o regresión, se crea el modelo utilizando librerias de ML como ser pytorch, scikit-learn, tensorflow, keras,etc. Luego, se configura los hiperparámetros propios del modelo a ser tuneados. \n",
        "En este caso, utilizaremos una máquina de vectores de soporte (SVM). Es un modelo de aprendizaje automático muy potente y versátil, capaz de realizar clasificación, regresión e incluso detección de valores atípicos lineales o no lineales. \n",
        "\n",
        "Para el dataset de `weatherAUS_ML.csv` tunearemos 2 hiperparámetros: \n",
        "- `min_samples_leaf`: The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least min_samples_leaf training samples in each of the left and right branches. This may have the effect of smoothing the model, especially in regression.\n",
        "\n",
        "- `criterion` : The function to measure the quality of a split. Supported criteria are “gini” for the Gini impurity and “log_loss” and “entropy” both for the Shannon information gain, see Mathematical formulation.\n",
        "\n",
        "Nota: El dataset fue previamente limpiado y esta almacenado en el siguiente repositorio: \n",
        "\n",
        "https://github.com/sharonmaygua/rain_prediction"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Crear un cluster\n",
        "\n",
        "Se utiliza el nombre de `cpu-cluster`, la familia `STANDARD_DS3_V2` y `4` instancias dedicadas."
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cpu_compute_target = \"cpu-cluster\"\n",
        "\n",
        "try:\n",
        "    # let's see if the compute target already exists\n",
        "    cpu_cluster = ml_client.compute.get(cpu_compute_target)\n",
        "except Exception:\n",
        "    cpu_cluster = AmlCompute(\n",
        "        name=cpu_compute_target,\n",
        "        type=\"amlcompute\",\n",
        "        size=\"STANDARD_DS3_V2\",\n",
        "        min_instances=0,\n",
        "        max_instances=4,\n",
        "        idle_time_before_scale_down=180,\n",
        "        tier=\"Dedicated\",\n",
        "    )\n",
        "\n",
        "    cpu_cluster = ml_client.compute.begin_create_or_update(cpu_cluster).result()"
      ],
      "outputs": [],
      "execution_count": 10,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1698627694389
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Crear un entorno personalizado\n",
        "\n",
        "Esto nos va a permitir que las instancias de cluster no tengan problema ejecutando el código de `src/train.py`. El archivo `./env/conda.yaml` contiene todas las dependencias necesarias que se instalaran en las instancias."
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "env_name = 'sklearn-env'\n",
        "job_env = Environment(\n",
        "    name=env_name,\n",
        "    description=\"sklearn 0.24.2\",\n",
        "    conda_file='./env/conda.yaml',\n",
        "    image=\"mcr.microsoft.com/azureml/openmpi4.1.0-ubuntu20.04:latest\",\n",
        ")\n",
        "job_env = ml_client.environments.create_or_update(job_env)\n"
      ],
      "outputs": [],
      "execution_count": 11,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1698627699529
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Ejecutar el código en el cluster"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Este comando nos va a permitir correr el script `./src/train.py` en la instancia. Se hace referencia al dataset que se va a usar que está previamente cargado en el Datastorage de azure. También, como es solamente una instancia que va a correr, se le pasan los parámetros necesarios utilizados por el script, que son `min_samples_split` y `criterion`."
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "job = command(\n",
        "    code=\"./src\",\n",
        "    command=\"python train.py --dataset_path ${{inputs.dataset_path}} --min_samples_leaf ${{inputs.min_samples_leaf}} --criterion ${{inputs.criterion}}\",\n",
        "    environment=f\"{job_env.name}:{job_env.version}\",\n",
        "    experiment_name='rain-prediction-exp-decision-tree-hyp',\n",
        "    display_name=\"rain-prediction-exp-decision-tree-hyp\",\n",
        "    inputs={\n",
        "        \"dataset_path\": Input(\n",
        "            type=\"uri_file\",\n",
        "            path='https://raw.githubusercontent.com/sharonmaygua/rain_prediction/main/weatherAUS_ML.csv',\n",
        "        ),\n",
        "        \"min_samples_leaf\": 3,\n",
        "        \"criterion\": \"entropy\",\n",
        "    },\n",
        "    compute=cpu_compute_target,\n",
        ")\n"
      ],
      "outputs": [],
      "execution_count": 14,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1698627771269
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "returned_job = ml_client.jobs.create_or_update(job)"
      ],
      "outputs": [],
      "execution_count": 15,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1698627778870
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ml_client.jobs.stream(returned_job.name)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "RunId: willing_lettuce_k3xfqvt0t3\nWeb View: https://ml.azure.com/runs/willing_lettuce_k3xfqvt0t3?wsid=/subscriptions/3deaa453-5a6c-4bcd-85f1-1645c3ccd539/resourcegroups/diplomado_ucb/workspaces/rain_prediction_aus\n\nExecution Summary\n=================\nRunId: willing_lettuce_k3xfqvt0t3\nWeb View: https://ml.azure.com/runs/willing_lettuce_k3xfqvt0t3?wsid=/subscriptions/3deaa453-5a6c-4bcd-85f1-1645c3ccd539/resourcegroups/diplomado_ucb/workspaces/rain_prediction_aus\n\n"
        }
      ],
      "execution_count": 16,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1698628177032
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tuneo de hiperparámetros\n",
        "\n",
        "En este caso, se reusa el job creado anteriormente pero como una función que configura el espacio de estados de búsqueda para los dos hiperparámetros. Luego se utiliza el método `sweep` para configurar cómo se desea hacer la búsqueda."
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "job_for_sweep = job(\n",
        "    min_samples_leaf=Choice([1,3,7,9]),\n",
        "    criterion=Choice(values=['entropy','gini']),\n",
        ")\n",
        "\n",
        "sweep_job = job_for_sweep.sweep(\n",
        "    compute=cpu_compute_target,\n",
        "    sampling_algorithm=\"random\",\n",
        "    primary_metric=\"F1 Score\",\n",
        "    goal=\"Maximize\",\n",
        "    max_total_trials=12,\n",
        "    max_concurrent_trials=4,\n",
        ")\n",
        "\n",
        "returned_sweep_job = ml_client.create_or_update(sweep_job)\n",
        "ml_client.jobs.stream(returned_sweep_job.name)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "RunId: ivory_ant_xq0h9qrk85\nWeb View: https://ml.azure.com/runs/ivory_ant_xq0h9qrk85?wsid=/subscriptions/3deaa453-5a6c-4bcd-85f1-1645c3ccd539/resourcegroups/diplomado_ucb/workspaces/rain_prediction_aus\n\nStreaming azureml-logs/hyperdrive.txt\n=====================================\n\n[2023-10-30T01:11:24.575417][GENERATOR][INFO]Trying to sample '4' jobs from the hyperparameter space\n[2023-10-30T01:11:25.1215064Z][SCHEDULER][INFO]Scheduling job, id='ivory_ant_xq0h9qrk85_0' \n[2023-10-30T01:11:25.3859095Z][SCHEDULER][INFO]Scheduling job, id='ivory_ant_xq0h9qrk85_1' \n[2023-10-30T01:11:25.4946178Z][SCHEDULER][INFO]Scheduling job, id='ivory_ant_xq0h9qrk85_2' \n[2023-10-30T01:11:25.5406437Z][SCHEDULER][INFO]Successfully scheduled a job. Id='ivory_ant_xq0h9qrk85_0' \n[2023-10-30T01:11:25.5466457Z][SCHEDULER][INFO]Scheduling job, id='ivory_ant_xq0h9qrk85_3' \n[2023-10-30T01:11:25.488472][GENERATOR][INFO]Successfully sampled '4' jobs, they will soon be submitted to the execution target.\n[2023-10-30T01:11:25.7163571Z][SCHEDULER][INFO]Successfully scheduled a job. Id='ivory_ant_xq0h9qrk85_1' \n[2023-10-30T01:11:25.8150178Z][SCHEDULER][INFO]Successfully scheduled a job. Id='ivory_ant_xq0h9qrk85_2' \n[2023-10-30T01:11:25.8624878Z][SCHEDULER][INFO]Successfully scheduled a job. Id='ivory_ant_xq0h9qrk85_3' \n"
        }
      ],
      "execution_count": 17,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1698595559397
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import shutil\n",
        "shutil.make_archive('.', 'zip', './aldunatelipa')"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 22,
          "data": {
            "text/plain": "'/mnt/batch/tasks/shared/LS_root/mounts/clusters/aldunatelipac1/code/Users/aldunatelipac/..zip'"
          },
          "metadata": {}
        }
      ],
      "execution_count": 22,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1698598316136
        }
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python310-sdkv2",
      "language": "python",
      "display_name": "Python 3.10 - SDK v2"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.11",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "kernel_info": {
      "name": "python310-sdkv2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}